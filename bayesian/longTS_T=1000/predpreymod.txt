
    model {
    
    # Priors and constraints
    logN[1] ~ dnorm(0,0.01) # Prior on initial pop size on the log scale
    logP[1] ~ dnorm(0,0.01) # Prior on initial pop size on the log scale

    # Priors prey population dynamics
    r_V ~ dnorm(1,1) #dnorm(1,0.001) # below the truth, rather flat prior
    K_V ~ dunif(0.2,10)
    sigma_V ~ dunif(0.01,5) # rather vague 
    sigma2_V<-pow(sigma_V, 2)
    tau_V<-pow(sigma_V,-2)

 
    #Priors predator population dynamics
    Q ~ dgamma(0.1,0.1) ### can I change by e.g. dunif(4,40)?
    r_P ~ dnorm(0.3,1) ## dnorm(1,0.1)
    sigma_P ~ dunif(0.01,2) # rather vague 
    sigma2_P<-pow(sigma_P, 2)
    tau_P<-pow(sigma_P,-2)
    
    #Priors predation parameters 
    tau_FR ~ dgamma(.01,.01)
    #C~dgamma(.01,.01) # uninformative priors OK for that one
    #D~dgamma(.01,.01)
    a~dgamma(.01,.01) # uninformative priors OK for that one
    h~dgamma(.01,.01)

    # Intermediate nodes
    MV <- K_V * max(exp(r_V)-1,0.1)
    #Another option is to restrict r_V and r_P to positive values 
    QP <- Q / max(exp(r_P)-1,0.1) #this damned worked when I made a typo and used r_V
   

    # Likelihood
    # state process

    for (t in 1:(T-1)){        

    FRUpdate[t] <- a*N[t]/(1+a*h*N[t]) #functional response equation, including noise
    FR[t+1] ~  dnorm(FRUpdate[t],tau_FR) #small trick to use FR data

    logNupdate[t] <- logN[t] + r_V -log(1+ N[t]/MV ) -FR[t+1]*exp(logP[t])/N[t]
    logN[t+1] ~ dnorm(logNupdate[t],tau_V)
    N[t]<-exp(logN[t])

    # for some reason, log(1+(exp(r_V)-1)*N[t]/K_V) was not working initially
    # But that's not the right equation... 

    logP[t+1]~ dnorm(logPupdate[t],tau_P)
    logPupdate[t] <- logP[t] + r_P - log( 1 + exp(logP[t])*QP/N[t] ) 
    
    }
    
    }
    
